[
  {
    "message": "Bump version to v0.0.3"
  },
  {
    "message": "feat: use scikit-build-core (#13)\n\nThis switches the build system to scikit-build-core and adds Windows\r\nwheels (close #9 and close #12). It drops s390x because it's missing\r\nfrom upstream and that causes it to be called x86:\r\nhttps://github.com/ggerganov/whisper.cpp/blob/8fac6455ffeb0a0950a84e790ddb74f7290d33c4/CMakeLists.txt#L473-L474\r\n- the logic there should be changed to only add x86 specific flags if\r\nx86 is detected, not to filter all known cases that are not x86. A very\r\nrecent version of CMake is required due to EXCLUDE_FROM_ALL, but\r\nscikit-build-core handles requesting it if missing for you.\r\n\r\nTested locally with `pipx run build --installer=uv`. Checked contents\r\nwith `unzip -l dist/*.whl`. Validated pyproject.toml with `pipx run\r\nvalidate-pyproject-schema-store[all] pyproject.toml -v`. Checked the\r\nwheel with `pipx run --spec delocate delocate-listdeps\r\ndist/whisper_cpp_cli-0.0.2-py3-none-macosx_14_0_x86_64.whl` (I had\r\n`BUILD_SHARED_LIBS` set to `ON` for a bit, somehow thinking that would\r\nbuild static libs when enabled...).\r\n\r\nSince there's no pre-commit file, formatted CMakeLists.txt manually with\r\n`pipx run cmake-format -I CMakeLists.txt`.\r\n\r\nAdding the other features should just be setting cmake flags; core-ml\r\nfor example can be enabled by passing `-Ccmake.define.WHISPER_COREML=1`.\r\nSimilarly for WHISPER_CUDA, etc.\r\n\r\nSigned-off-by: Henry Schreiner <henryschreineriii@gmail.com>"
  },
  {
    "message": "Use linux rather than manylinux or musllinux in tag (#11)\n\ncibuildwheel will audit the wheel and add the appropriate Linux tags."
  },
  {
    "message": "Move some `cibuildwheel` settings into `pyproject.toml` (#10)"
  },
  {
    "message": "Bump version to 0.0.2"
  }
]
